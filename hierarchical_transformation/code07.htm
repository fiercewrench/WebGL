
<!DOCTYPE html>

<html>

<head>
<title>Renfei Wang &mdash; lab03 </title>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">

<script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>

<!--  ************** Fragment Shader ************* --> 
<script id="shader-fs" type="x-shader/x-fragment">
precision mediump float;
varying vec4 vColor; 

void main(void) {
        gl_FragColor = vColor; 
    }
</script>

<!--  ************** Vertex Shader ************* --> 
<script id="shader-vs" type="x-shader/x-vertex">

    attribute vec3 aVertexPosition;
    attribute vec4 aVertexColor;
    attribute vec3 aVertexNormal;
    

   uniform mat4 uMVMatrix;
   uniform mat4 uPMatrix; 
   uniform mat4 uNMatrix; 

   uniform vec4 light_pos; 
   uniform vec4 ambient_coef;
   uniform vec4 diffuse_coef;
   uniform vec4 specular_coef;
   uniform float mat_shininess; 

   uniform vec4 light_ambient; 
   uniform vec4 light_diffuse; 
   uniform vec4 light_specular;

   varying vec4 eye_pos;  
   varying vec3 v_normal;  
   varying vec4 vColor;

    void main(void) {  
     vec4 light_pos_in_eye = light_pos;
    v_normal =normalize(vec3(uNMatrix*vec4(aVertexNormal,1.0)));
    eye_pos = uMVMatrix*vec4(aVertexPosition, 1.0);
    vec3 light_vector = normalize(vec3(light_pos_in_eye - eye_pos));
    vec3 eye_vector = normalize(-vec3(eye_pos));
    vec3 halfv = normalize(light_vector+eye_vector);
    vec4 ambient = ambient_coef * light_ambient; 
    float ndotl = max(dot(v_normal, light_vector), 0.0); 
    vec4 diffuse = diffuse_coef * light_diffuse* ndotl;
    vec3 R= normalize(vec3(reflect(-light_vector, v_normal))); 
    float rdotv = max(dot(R, eye_vector), 0.0);
    vec4 specular;  
    if (ndotl>0.0) 
      specular = specular_coef* light_specular*pow(rdotv, mat_shininess); 
    else
      specular = vec4(0,0,0,1);

      gl_Position = uPMatrix* uMVMatrix*vec4(aVertexPosition, 1.0);

      vColor = ambient+diffuse+specular; 
    }
</script>


<script type="text/javascript" src="shaders_setup.js"></script>
<script type="text/javascript" src="code07.js"></script>


</head>


<body onload="webGLStart();">
    <canvas id="canvas"style="border:none;"width="500"height="500"></canvas>

    <h4> Choose the kind of geometry representation for the object:  </h4>
    <button  onclick="geometry(1)"> LINEs</button>
    <button  onclick="geometry(2)"> FACES</button>

    <h4> Change the Background Color:  </h4>
    <button  onclick="BG(0,0,0)"> Black</button>
    <button  onclick="BG(1,1,1)"> White</button>

    <div>
    <h4>
    Reset the Screen:
    </h4>
    <button  onclick="ResetScreen()"> Reset Screen </button>
    </div>

 <footer>
    <center>
      <p>&copy; CSE 5542 Lab3: Renfei Wang, Ohio State University, 2019</p>
    </center>
    </footer>

  
    

</body>

</html>

