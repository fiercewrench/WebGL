
<!DOCTYPE html>

<html>

<head>
<title>hwshen WebGL &mdash; code14 Environment Cube Map </title>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">

<script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>

<!--  ************** Fragment Shader ************* --> 
<script id="shader-fs" type="x-shader/x-fragment">
   precision mediump float;
   precision mediump int;

   uniform mat4 uV2WMatrix;  // eye to world 

   uniform vec4 ambient_coef;
   uniform vec4 diffuse_coef;
   uniform vec4 specular_coef;
   uniform float mat_shininess; 

   uniform vec4 light_ambient; 
   uniform vec4 light_diffuse; 
   uniform vec4 light_specular;

   uniform vec3 camera_pos;

   uniform int use_texture; 
   uniform sampler2D myTexture;
   uniform samplerCube cubeMap; 
   uniform sampler2D bumpMapTexture;
   uniform int bump_texture;
   uniform int set_bump;

   varying vec4 light_pos_in_eye;
   varying vec4 eye_pos; 
   varying mat4 uNMat;
   varying vec3 v_normal;
   
   varying vec4 vColor; 
  varying highp vec2 FtexCoord; 

   void main(void) {

//vec4 vColor; 
vec4 normalMap;
vec3 n;

if(bump_texture==0){
        normalMap = texture2D(bumpMapTexture, FtexCoord);
        normalMap =normalize(normalMap);
        n =normalize(vec3(uNMat*normalMap));
        if(set_bump == 0){
        n=v_normal;
      }
}else{
  n=v_normal;
}
      
    // light vector L = l-p 
        vec3 light_vector = normalize(vec3(light_pos_in_eye - eye_pos)); 

        // eye vector V = e-p, where e is the camera position
        vec3 eye_vector = normalize(camera_pos-vec3(eye_pos));

        vec4 ambient = ambient_coef * light_ambient; 

        float ndotl = max(dot(n, light_vector), 0.0); 
        vec4 diffuse = diffuse_coef * light_diffuse* ndotl;

        vec3 R = normalize(2.0 * ndotl *n-eye_vector);
        float rdotv = max(dot(R, eye_vector), 0.0);

        vec4 specular;  
        if (ndotl>0.0) 
        specular = specular_coef* light_specular*pow(rdotv, mat_shininess); 
        else
        specular = vec4(0,0,0,1);  

       

       // vColor = ambient+diffuse+specular;

     vec4 texcolor;
     vec3 view_vector, ref; 
     vec4 env_color = vec4(1,0,0,1);
//env mapping
if (use_texture == 2){
    view_vector = normalize(vec3(vec4(0,0,0,1)-eye_pos));
    ref = normalize(reflect(-view_vector, n));  // calculate the reflection vector in eye space
    ref = vec3(uV2WMatrix*vec4(ref,0));   // convert to world space
   env_color = vColor*textureCube(cubeMap, ref);
   //env_color =textureCube(cubeMap, ref); -->
    gl_FragColor = env_color;
}else if(use_texture == 1){
    texcolor = texture2D(myTexture, FtexCoord); 
    gl_FragColor = texcolor;
}

else{
  gl_FragColor = vColor; 
 
}
//      gl_FragColor = vColor; 
 }
</script>

<!--  ************** Vertex Shader ************* --> 
<script id="shader-vs" type="x-shader/x-vertex">

precision mediump float;
precision mediump int; 

   attribute vec3 aVertexPosition;
   attribute vec3 aVertexNormal;
   attribute vec2 aVertexTexCoords;
  attribute vec3 aVertexColor;

   uniform mat4 uMMatrix; 
   uniform mat4 uVMatrix;
   uniform mat4 uPMatrix;
   uniform mat4 uNMatrix;
   uniform mat4 uV2WMatrix;  // eye to world 

   uniform vec4 light_pos; 


   uniform int use_texture; 
   uniform sampler2D myTexture; 

   varying vec4 light_pos_in_eye;
   varying vec4 eye_pos;  //vertex position in eye space 
   varying vec3 v_normal;  // vertex normal 
   varying vec4 vColor; 
   varying highp vec2 FtexCoord; 

varying mat4 uNMat;
    void main(void) {
      uNMat =uNMatrix;
       FtexCoord = aVertexTexCoords; 
        
    gl_PointSize = 2.0;
       light_pos_in_eye =uVMatrix*light_pos;   

        // transform normal from local to eye space: normal matrix is the inverse transpose of the modelview matrix 
       v_normal =normalize(vec3(uNMatrix*vec4(aVertexNormal,0.0)));
     // v_normal =normalize(vec3(uNMatrix*normalMap));
        // transform the vertex position to eye space 
        eye_pos = uVMatrix*uMMatrix*vec4(aVertexPosition, 1.0);

        gl_Position = uPMatrix*uVMatrix*uMMatrix*vec4(aVertexPosition, 1.0);


//      vColor = vec4(use_texture, use_texture, 0, 1.0); 
//      vColor = vec4(aVertexTexCoords, 1.0, 1.0); 
//      vColor = vec4(aVertexColor,1.0); 
//      vColor = vec4(aVertexNormal, 1.0);
      vColor = vec4(v_normal, 1.0);

    }
</script>


<script type="text/javascript" src="shaders_setup.js"></script>
<script type="text/javascript" src="code14.js"></script>


</head>


<body onload="webGLStart();">
    <canvas
    id="code13-canvas"style="border:none;"width="700"height="700"></canvas>


     <h4> Geometry:  </h4>

    <button  onclick="obj(1)"> all</button>
    <button  onclick="obj(2)"> sphere and rectangle</button>
    <button  onclick="obj(3)"> rectangle</button>

    <h4> Texture:  </h4>
    <button  onclick="t_texture(0)"> NO  </button>
    <button  onclick="t_texture(1)"> Regular </button>
    <button  onclick="t_texture(2)"> Cubemap </button>

    <h4> Bump Mapping:  </h4>
    <button  onclick="b_texture(1)"> YES  </button>
    <button  onclick="b_texture(0)"> NO </button>



    <h4> Geometry:  </h4>
    <button  onclick="geometry(0)"> POINTS</button>
    <button  onclick="geometry(1)"> LINEs</button>
    <button  onclick="geometry(2)"> FACES</button>

    <div>
    <h4>
    </h4>
    <button  onclick="redraw()"> Redraw</button>
    </div>

  
    

</body>

</html>

